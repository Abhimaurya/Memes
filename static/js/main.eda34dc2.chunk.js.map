{"version":3,"sources":["containers/MemeCreator/constant.js","containers/MemeCreator/action.js","containers/components/Search/index.js","containers/MemeCreator/index.js","App.js","serviceWorker.js","containers/MemeCreator/reducer.js","rootReducer.js","index.js","store.js"],"names":["SEARCH_SUCCESS","SEARCH_FAILURE","ADD_LOADER","CHANGE_POSITION","CHANGE_CAPTION","SAVE_DATA","CLEAR_DATA","changePosition","position","console","log","type","MemeCreator","props","useState","query","setQuery","className","id","onKeyUp","e","target","value","placeholder","onClick","search","connect","state","dispatch","MemeCreatorReducer","loading","imageData","data","Fragment","class","Search","fetch","then","resp","json","result","payload","images","catch","searchAction","Object","keys","length","src","url","alt","text","map","d","key","checked","onChange","name","style","float","App","Boolean","window","location","hostname","match","initialState","demo","JSON","parse","localStorage","getItem","combineReducers","action","setItem","stringify","clear","reload","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQAAaA,EAAiB,iCACjBC,EAAiB,iCACjBC,EAAa,6BACbC,EAAkB,kCAClBC,EAAiB,iCACjBC,EAAY,4BACZC,EAAa,6BC2BnB,SAASC,EAAeC,GAE3B,OADAC,QAAQC,IAAI,WAAYF,GACjB,CACHG,KAAMR,EACNK,Y,YCzBQI,MAVhB,SAAqBC,GAAQ,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,KAE1B,OACE,yBAAKC,UAAU,OACX,2BAAOC,GAAG,mBAAmBC,QAAS,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOC,QAAQX,KAAK,OAAOY,YAAY,iCAC/F,4BAAQL,GAAG,iBAAiBM,QAAS,kBAAMX,EAAMY,OAAOV,KAAxD,gBCkFR,IAUeW,eAVS,SAAAC,GAAK,sBACtBA,MAGoB,SAACC,GACxB,MAAO,CACHA,cAIOF,EA9Ff,SAAqBb,GAAQ,IAAD,EACaA,EAAMgB,mBAAnCC,EADgB,EAChBA,QAASC,EADO,EACPA,UAAWC,EADJ,EACIA,KAM5B,OALAvB,QAAQC,IAAI,kBAAmBG,GAI/BJ,QAAQC,IAAI,UAAWoB,EAASC,GAE5B,yBAAKd,UAAU,OACX,kBAAC,IAAMgB,SAAP,KACI,yBAAKC,MAAM,aACP,kBAACC,EAAD,CAAQV,OART,SAACV,GACZF,EAAMe,SFGP,SAAsBb,GACzB,OAAO,SAAAa,GACHnB,QAAQC,IAAI,UACZkB,EAAS,CAAEjB,KAAMT,IACjBkC,MAAM,uDAAyDrB,GAC1DsB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACF/B,QAAQC,IAAI,cAAe8B,GAC3BZ,EAAS,CACLjB,KAAMX,EACNyC,QAASD,EAAOE,YAGvBC,OAAM,WACHf,EAAS,CACLjB,KAAMV,QElBH2C,CAAa7B,OAShB,yBAAKmB,MAAM,OACP,yBAAKjB,UAAU,oBAENa,GAAyB,OAAdC,EAAoFA,GAAac,OAAOC,KAAKf,GAAWgB,OAEhI,yBAAK9B,UAAU,iBACX,yBAAK+B,IAAKjB,EAAUkB,IAAKC,IAAI,eAEF,QAAvBnB,EAAUvB,SAAqB,yBAAKS,UAAU,aAAac,GAAaA,EAAUoB,MAAqC,WAAvBpB,EAAUvB,SAAwB,yBAAKS,UAAU,gBAAgBc,GAAaA,EAAUoB,MAAc,yBAAKlC,UAAU,gBAAgBc,GAAaA,EAAUoB,OAE3P,yBAAKlC,UAAU,qBAAf,eAPoB,yBAAKA,UAAU,qBAAf,uBAUjC,yBAAKA,UAAU,mBACX,2CAEIe,EAAKoB,KAAI,SAACC,GAAD,OACL,kBAAC,IAAMpB,SAAP,KACI,yBAAKC,MAAM,UACf,yBAAKoB,IAAKD,EAAEnC,GAAI8B,IAAKK,EAAEJ,IAAKC,IAAI,gBAEjB,QAAfG,EAAE7C,SAAqB,0BAAMS,UAAU,mBAAmBoC,EAAEF,MAA8B,WAAfE,EAAE7C,SAAwB,0BAAMS,UAAU,sBAAsBoC,EAAEF,MAAe,0BAAMlC,UAAU,sBAAsBoC,GAAKA,EAAEF,cAajO,yBAAKjB,MAAM,OAEP,2BAAOf,QAAS,SAACC,GAAD,OAAOP,EAAMe,UFbvBuB,EEa8C/B,EAAEC,OAAOC,MFZjFb,QAAQC,IAAI,OAAQyC,GACb,CACHxC,KAAMP,EACN+C,UAJD,IAAuBA,GEagExC,KAAK,OAAOuB,MAAM,gBAAgBX,YAAY,4BAEpH,yBAAKW,MAAM,qBACP,6BACI,2BAAOqB,QAASxB,GAAoC,QAAvBA,EAAUvB,SAAoBgD,SAAU,kBAAM3C,EAAMe,SAASrB,EAAe,SAASkD,KAAK,WAAW9C,KAAK,UACvI,sCAEJ,6BACI,2BAAO4C,QAASxB,GAAoC,WAAvBA,EAAUvB,SAAuBgD,SAAU,kBAAM3C,EAAMe,SAASrB,EAAe,YAAYkD,KAAK,WAAW9C,KAAK,UAC7I,yCAEJ,6BACI,2BAAO4C,QAASxB,GAAoC,WAAvBA,EAAUvB,SAAuBgD,SAAU,kBAAM3C,EAAMe,SAASrB,EAAe,YAAYkD,KAAK,WAAW9C,KAAK,UAC7I,2CAMZ,yBAAK+C,MAAO,CAAEC,MAAO,SACjB,4BAAQnC,QAAS,kBAAMX,EAAMe,UFvBjDnB,QAAQC,IAAI,OAAQyC,GACb,CACHxC,KAAMN,EACN8C,UAJD,IAAkBA,GEwBkDjC,GAAG,cAAtD,cAGJ,yBAAKD,UAAU,mBACf,4BAAQA,UAAU,kBAAmBO,QAAS,kBAAMX,EAAMe,UFnB1EnB,QAAQC,IAAI,OAAQyC,GACb,CACHxC,KAAML,EACN6C,UAJD,IAAmBA,IEoBN,2BClEJS,MARhB,SAAa/C,GACX,OACE,yBAAKI,UAAU,OACb,kBAAC,EAAD,QCKc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BChBOC,EAAe,CACxBC,MAAM,EACNpC,UAAW,KACXD,SAAS,EACTE,KAAMoC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,ICDvCC,cAAgB,CAC9B3C,mBDGc,WAAmC,IAAlCF,EAAiC,uDAAzBuC,EAAcO,EAAW,uCAC7C,OAAQA,EAAO9D,MACd,IAAK,gBACJ,OAAO,eACAgB,EADP,CAECwC,MAAM,IAGT,KAAKjE,EACD,OAAO,eACAyB,EADP,CAEIG,SAAS,IAIjB,KAAK9B,EACDS,QAAQC,IAAI,SAAU+D,EAAOhC,SAC7B,IAAIV,EAAY,KAKhB,OAJG0C,EAAOhC,SAAWgC,EAAOhC,QAAQM,SAChChB,EAAS,eAAO0C,EAAOhC,QAAQ,GAAtB,CAA0BjC,SAAU,YAG1C,eACAmB,EADP,CAEII,YACAD,SAAS,IAIjB,KAAK3B,EACD,IAAI4B,EAAY,KAKhB,OAJGJ,EAAMI,YACLA,EAAS,eAAOJ,EAAMI,UAAb,CAAwBvB,SAAUiE,EAAOjE,YAG/C,eACAmB,EADP,CAEII,YACAD,SAAS,IAGjB,KAAK1B,EACDK,QAAQC,IAAI,UAAW+D,EAAOtB,MAC9B,IAAIpB,EAAY,KAKhB,OAJGJ,EAAMI,YACLA,EAAS,eAAOJ,EAAMI,UAAb,CAAwBoB,KAAMsB,EAAOtB,QAG3C,eACAxB,EADP,CAEII,YACAD,SAAS,IAIjB,KAAKzB,EACDI,QAAQC,IAAI,UAAW+D,EAAOtB,MAC9B,IAAInB,EAAOL,EAAMK,KAMjB,OALGL,EAAMI,YACLC,EAAI,CAAIL,EAAMI,WAAV,mBAAwBC,KAEhCvB,QAAQC,IAAI,UAAUsB,GACtBsC,aAAaI,QAAQ,OAAQN,KAAKO,UAAU3C,IACrC,eACAL,EADP,CAEIK,OACAF,SAAS,IAIjB,KAAKxB,EACDG,QAAQC,IAAI,YAAa+D,EAAOtB,MAChCmB,aAAaM,QACbd,OAAOC,SAASc,SAGnB,QACC,OAAOlD,ME9EbmD,IAASC,OACL,kBAAC,IAAD,CAAUC,MCFC,WAA0C,IAAlBd,EAAiB,uDAAJ,GACnD,OAAOe,YACLC,EACAhB,EACAiB,YAAgBC,MDFEC,IAChB,kBAAC,EAAD,OAEDC,SAASC,eAAe,SHuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.eda34dc2.chunk.js","sourcesContent":["export const SEARCH_SUCCESS = 'app/MemeCreator/SEARCH_SUCCESS';\r\nexport const SEARCH_FAILURE = 'app/MemeCreator/SEARCH_FAILURE';\r\nexport const ADD_LOADER = 'app/MemeCreator/ADD_LOADER';\r\nexport const CHANGE_POSITION = 'app/MemeCreator/CHANGE_POSITION';\r\nexport const CHANGE_CAPTION = 'app/MemeCreator/CHANGE_CAPTION';\r\nexport const SAVE_DATA = 'app/MemeCreator/SAVE_DATA';\r\nexport const CLEAR_DATA = 'app/MemeCreator/CLEAR_DATA';","/*\n src/actions/simpleAction.js\n*/\nimport { SEARCH_SUCCESS, SEARCH_FAILURE, ADD_LOADER, CHANGE_POSITION, CHANGE_CAPTION, SAVE_DATA, CLEAR_DATA } from './constant.js';\nexport const demoAction = () => dispatch => {\n\n    dispatch({\n        type: 'SIMPLE_ACTION',\n        payload: 'result_of_simple_action'\n    })\n};\n//call splashbase api\nexport function searchAction(query) {\n    return dispatch => {\n        console.log('inside')\n        dispatch({ type: ADD_LOADER });\n        fetch('http://www.splashbase.co/api/v1/images/search?query=' + query)\n            .then(resp => resp.json())\n            .then(result => {\n                console.log('result hete', result);\n                dispatch({\n                    type: SEARCH_SUCCESS,\n                    payload: result.images,\n                });\n            })\n            .catch(() => {\n                dispatch({\n                    type: SEARCH_FAILURE,\n                });\n            });\n    };\n};\n\nexport function changePosition(position) {\n    console.log('position', position);\n    return {\n        type: CHANGE_POSITION,\n        position\n    };\n};\n\nexport function changeCaption(text) {\n    console.log('text', text);\n    return {\n        type: CHANGE_CAPTION,\n        text\n    };\n};\n\n\nexport function saveData(text) {\n    console.log('text', text);\n    return {\n        type: SAVE_DATA,\n        text\n    };\n};\n\nexport function clearData(text) {\n    console.log('text', text);\n    return {\n        type: CLEAR_DATA,\n        text\n    };\n};\n\n","import React, { useState } from 'react';\n\nfunction MemeCreator(props) {\n    const [query, setQuery] = useState('');\n  return (\n    <div className=\"row\">\n        <input id=\"memes_query_text\" onKeyUp={(e) => setQuery(e.target.value)} type=\"text\" placeholder=\"Enter Your Search Query Here\" />\n        <button id=\"memes-load-img\" onClick={() => props.search(query)}>Load Image</button>\n    </div>\n  );\n}\n\nexport default (MemeCreator);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changePosition, searchAction, changeCaption, saveData ,clearData } from './action';\nimport Search from '../components/Search'\n\nfunction MemeCreator(props) {\n    const { loading, imageData, data } = props.MemeCreatorReducer;\n    console.log('comming here>>>', props);\n    const search = (query) => {\n        props.dispatch(searchAction(query));\n    };\n    console.log('loading', loading, imageData);\n    return (\n        <div className=\"App\">\n            <React.Fragment>\n                <div class=\"container\">\n                    <Search search={search} />\n\n                    <div class=\"row\">\n                        <div className=\"memes-second-row\">\n                            {\n                                !loading && imageData === null ? <div className=\"memes-img-No-data\">Please Load Image !</div> : imageData && Object.keys(imageData).length ?\n\n                                    <div className=\"memes-img-box\">\n                                        <img src={imageData.url} alt=\"main image\" />\n                                        {\n                                            imageData.position === 'top' ? <div className=\"memes-top\">{imageData && imageData.text}</div> : imageData.position === 'center' ? <div className=\"memes-center\">{imageData && imageData.text}</div> : <div className=\"memes-bottom\">{imageData && imageData.text}</div>\n                                        }\n                                    </div> : <div className=\"memes-img-No-data\"> Loading...</div>\n                            }\n                            {\n                                <div className=\"memes-save-item\">\n                                    <div>Saved Meme</div>\n                                    {\n                                        data.map((d) => (\n                                            <React.Fragment>\n                                                <div class=\"change\">\n                                            <img key={d.id} src={d.url} alt=\"saved image\" />\n                                            {\n                                            d.position === 'top' ? <span className=\"saved-memes-top\">{d.text}</span> : d.position === 'center' ? <span className=\"saved-memes-center\">{d.text}</span> : <span className=\"saved-memes-bottom\">{d && d.text}</span>\n                                        }\n                                        </div>\n                                            </React.Fragment>\n                                        ))\n                                    }\n                                 </div>\n                            }\n                        </div>\n                        \n                     \n                    </div>\n\n                    <div class=\"row\">\n\n                        <input onKeyUp={(e) => props.dispatch(changeCaption(e.target.value))} type=\"text\" class=\"memes-caption\" placeholder=\"Enter Your Caption Here\" />\n\n                        <div class=\"memes-adjust-text\">\n                            <div>\n                                <input checked={imageData && imageData.position === 'top'} onChange={() => props.dispatch(changePosition('top'))} name=\"position\" type=\"radio\" />\n                                <span>Top</span>\n                            </div>\n                            <div>\n                                <input checked={imageData && imageData.position === 'center'} onChange={() => props.dispatch(changePosition('center'))} name=\"position\" type=\"radio\" />\n                                <span>center</span>\n                            </div>\n                            <div>\n                                <input checked={imageData && imageData.position === 'bottom'} onChange={() => props.dispatch(changePosition('bottom'))} name=\"position\" type=\"radio\" />\n                                <span>Bottom</span>\n                            </div>\n                        </div>\n\n\n                    </div>\n                    <div style={{ float: 'left' }}>\n                        <button onClick={() => props.dispatch(saveData())} id=\"memes-save\">Save Meme</button>\n\n                    </div>\n                    <div className=\"row changewidth\">\n                    <button className=\"clear-save-menu\"  onClick={() => props.dispatch(clearData())} >Clear Saved Meme</button>\n                    </div>\n\n\n                </div>\n\n            </React.Fragment>\n\n        </div>\n    );\n}\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemeCreator);\n","import React from 'react';\nimport './App.scss';\nimport MemeCreator from './containers/MemeCreator';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <MemeCreator />\n    </div>\n  );\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SEARCH_SUCCESS, SAVE_DATA, ADD_LOADER, CHANGE_POSITION ,CHANGE_CAPTION,CLEAR_DATA} from './constant.js';\n//Initialise the state\nexport const initialState = {\n    demo: false,\n    imageData: null,\n    loading: false,\n    data: JSON.parse(localStorage.getItem('data')) || [],\n  };\n//Simple action when data not loaded\nexport default (state = initialState, action) => {\n    switch (action.type) {\n     case 'SIMPLE_ACTION':\n      return {\n          ...state,\n       demo: true\n      };\n\n    case ADD_LOADER:{\n        return {\n            ...state,\n            loading: true\n        };\n    }\n    //Loading  image at center\n    case SEARCH_SUCCESS: {\n        console.log('result', action.payload);\n        let imageData = null;\n        if(action.payload && action.payload.length) {\n            imageData = {...action.payload[0], position: 'center' }\n        }\n\n        return {\n            ...state,\n            imageData,\n            loading: false\n        };\n    }\n    //Change position of text top,center,or bottom\n    case CHANGE_POSITION: {\n        let imageData = null;\n        if(state.imageData) {\n            imageData = {...state.imageData, position: action.position }\n        }\n\n        return {\n            ...state,\n            imageData,\n            loading: false\n        };\n    }\n    case CHANGE_CAPTION: {\n        console.log('caption', action.text);\n        let imageData = null;\n        if(state.imageData) {\n            imageData = {...state.imageData, text: action.text }\n        }\n\n        return {\n            ...state,\n            imageData,\n            loading: false\n        };\n    }\n    // saved memes in right section after click on save meme button\n    case SAVE_DATA: {\n        console.log('caption', action.text);\n        let data = state.data;\n        if(state.imageData) {\n            data = [state.imageData, ...data]\n        }\n        console.log(\"getdata\",data);\n        localStorage.setItem('data', JSON.stringify(data));\n        return {\n            ...state,\n            data,\n            loading: false\n        };\n    }\n    //cleared the saved memes\n    case CLEAR_DATA:{\n        console.log('clearDATA', action.text);\n        localStorage.clear();\n        window.location.reload();\n    }\n\n     default:\n      return state\n    }\n}","/*\n src/reducers/rootReducer.js\n*/\nimport { combineReducers } from 'redux';\nimport MemeCreatorReducer from './containers/MemeCreator/reducer';\nexport default combineReducers({\n MemeCreatorReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n     <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/*\n * src/store.js\n * With initialState\n*/\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\nexport default function configureStore(initialState={}) {\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk)\n );\n}"],"sourceRoot":""}
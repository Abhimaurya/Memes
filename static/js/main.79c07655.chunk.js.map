{"version":3,"sources":["containers/MemeCreator/constant.js","containers/MemeCreator/action.js","containers/components/Search/index.js","containers/MemeCreator/index.js","App.js","serviceWorker.js","containers/MemeCreator/reducer.js","rootReducer.js","index.js","store.js"],"names":["SEARCH_SUCCESS","SEARCH_FAILURE","ADD_LOADER","CHANGE_POSITION","CHANGE_CAPTION","SAVE_DATA","CLEAR_DATA","changePosition","position","console","log","type","MemeCreator","props","useState","query","setQuery","className","id","onKeyUp","e","target","value","placeholder","onClick","search","connect","state","dispatch","MemeCreatorReducer","loading","imageData","data","Fragment","class","Search","fetch","then","resp","json","result","payload","images","catch","searchAction","Object","keys","length","src","url","alt","text","map","d","key","checked","onChange","name","style","float","App","Boolean","window","location","hostname","match","initialState","demo","JSON","parse","localStorage","getItem","combineReducers","action","setItem","stringify","clear","reload","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79c07655.chunk.js","sourcesContent":["export const SEARCH_SUCCESS = 'app/MemeCreator/SEARCH_SUCCESS';\r\nexport const SEARCH_FAILURE = 'app/MemeCreator/SEARCH_FAILURE';\r\nexport const ADD_LOADER = 'app/MemeCreator/ADD_LOADER';\r\nexport const CHANGE_POSITION = 'app/MemeCreator/CHANGE_POSITION';\r\nexport const CHANGE_CAPTION = 'app/MemeCreator/CHANGE_CAPTION';\r\nexport const SAVE_DATA = 'app/MemeCreator/SAVE_DATA';\r\nexport const CLEAR_DATA = 'app/MemeCreator/CLEAR_DATA';","/*\r\n src/actions/simpleAction.js\r\n*/\r\nimport { SEARCH_SUCCESS, SEARCH_FAILURE, ADD_LOADER, CHANGE_POSITION, CHANGE_CAPTION, SAVE_DATA, CLEAR_DATA } from './constant.js';\r\nexport const demoAction = () => dispatch => {\r\n\r\n    dispatch({\r\n        type: 'SIMPLE_ACTION',\r\n        payload: 'result_of_simple_action'\r\n    })\r\n};\r\n//call splashbase api\r\nexport function searchAction(query) {\r\n    return dispatch => {\r\n        console.log('inside')\r\n        dispatch({ type: ADD_LOADER });\r\n        fetch('http://www.splashbase.co/api/v1/images/search?query=' + query)\r\n            .then(resp => resp.json())\r\n            .then(result => {\r\n                console.log('result hete', result);\r\n                dispatch({\r\n                    type: SEARCH_SUCCESS,\r\n                    payload: result.images,\r\n                });\r\n            })\r\n            .catch(() => {\r\n                dispatch({\r\n                    type: SEARCH_FAILURE,\r\n                });\r\n            });\r\n    };\r\n};\r\n\r\nexport function changePosition(position) {\r\n    console.log('position', position);\r\n    return {\r\n        type: CHANGE_POSITION,\r\n        position\r\n    };\r\n};\r\n\r\nexport function changeCaption(text) {\r\n    console.log('text', text);\r\n    return {\r\n        type: CHANGE_CAPTION,\r\n        text\r\n    };\r\n};\r\n\r\n\r\nexport function saveData(text) {\r\n    console.log('text', text);\r\n    return {\r\n        type: SAVE_DATA,\r\n        text\r\n    };\r\n};\r\n\r\nexport function clearData(text) {\r\n    console.log('text', text);\r\n    return {\r\n        type: CLEAR_DATA,\r\n        text\r\n    };\r\n};\r\n\r\n","import React, { useState } from 'react';\r\n\r\nfunction MemeCreator(props) {\r\n    const [query, setQuery] = useState('');\r\n  return (\r\n    <div className=\"row\">\r\n        <input id=\"memes_query_text\" onKeyUp={(e) => setQuery(e.target.value)} type=\"text\" placeholder=\"Enter Your Search Query Here\" />\r\n        <button id=\"memes-load-img\" onClick={() => props.search(query)}>Load Image</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default (MemeCreator);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changePosition, searchAction, changeCaption, saveData ,clearData } from './action';\r\nimport Search from '../components/Search'\r\n\r\nfunction MemeCreator(props) {\r\n    const { loading, imageData, data } = props.MemeCreatorReducer;\r\n    console.log('comming here>>>', props);\r\n    const search = (query) => {\r\n        props.dispatch(searchAction(query));\r\n    };\r\n    console.log('loading', loading, imageData);\r\n    return (\r\n        <div className=\"App\">\r\n            <React.Fragment>\r\n                <div class=\"container\">\r\n                    <Search search={search} />\r\n\r\n                    <div class=\"row\">\r\n                        <div className=\"memes-second-row\">\r\n                            {\r\n                                !loading && imageData === null ? <div className=\"memes-img-No-data\">Please Load Image !</div> : imageData && Object.keys(imageData).length ?\r\n\r\n                                    <div className=\"memes-img-box\">\r\n                                        <img src={imageData.url} alt=\"main image\" />\r\n                                        {\r\n                                            imageData.position === 'top' ? <div className=\"memes-top\">{imageData && imageData.text}</div> : imageData.position === 'center' ? <div className=\"memes-center\">{imageData && imageData.text}</div> : <div className=\"memes-bottom\">{imageData && imageData.text}</div>\r\n                                        }\r\n                                    </div> : <div className=\"memes-img-No-data\"> Loading...</div>\r\n                            }\r\n                            {\r\n                                <div className=\"memes-save-item\">\r\n                                    <div>Saved Meme</div>\r\n                                    {\r\n                                        data.map((d) => (\r\n                                            <React.Fragment>\r\n                                                <div class=\"change\">\r\n                                            <img key={d.id} src={d.url} alt=\"saved image\" />\r\n                                            {\r\n                                            d.position === 'top' ? <span className=\"saved-memes-top\">{d.text}</span> : d.position === 'center' ? <span className=\"saved-memes-center\">{d.text}</span> : <span className=\"saved-memes-bottom\">{d && d.text}</span>\r\n                                        }\r\n                                        </div>\r\n                                            </React.Fragment>\r\n                                        ))\r\n                                    }\r\n                                 </div>\r\n                            }\r\n                        </div>\r\n                        \r\n                     \r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n\r\n                        <input onKeyUp={(e) => props.dispatch(changeCaption(e.target.value))} type=\"text\" class=\"memes-caption\" placeholder=\"Enter Your Caption Here\" />\r\n\r\n                        <div class=\"memes-adjust-text\">\r\n                            <div>\r\n                                <input checked={imageData && imageData.position === 'top'} onChange={() => props.dispatch(changePosition('top'))} name=\"position\" type=\"radio\" />\r\n                                <span>Top</span>\r\n                            </div>\r\n                            <div>\r\n                                <input checked={imageData && imageData.position === 'center'} onChange={() => props.dispatch(changePosition('center'))} name=\"position\" type=\"radio\" />\r\n                                <span>center</span>\r\n                            </div>\r\n                            <div>\r\n                                <input checked={imageData && imageData.position === 'bottom'} onChange={() => props.dispatch(changePosition('bottom'))} name=\"position\" type=\"radio\" />\r\n                                <span>Bottom</span>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div style={{ float: 'left' }}>\r\n                        <button onClick={() => props.dispatch(saveData())} id=\"memes-save\">Save Meme</button>\r\n\r\n                    </div>\r\n                    <div className=\"row changewidth\">\r\n                    <button className=\"clear-save-menu\"  onClick={() => props.dispatch(clearData())} >Clear Saved Meme</button>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n            </React.Fragment>\r\n\r\n        </div>\r\n    );\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MemeCreator);\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport MemeCreator from './containers/MemeCreator';\r\n\r\nfunction App(props) {\r\n  return (\r\n    <div className=\"App\">\r\n      <MemeCreator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default (App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { SEARCH_SUCCESS, SAVE_DATA, ADD_LOADER, CHANGE_POSITION ,CHANGE_CAPTION,CLEAR_DATA} from './constant.js';\r\n//Initialise the state\r\nexport const initialState = {\r\n    demo: false,\r\n    imageData: null,\r\n    loading: false,\r\n    data: JSON.parse(localStorage.getItem('data')) || [],\r\n  };\r\n//Simple action when data not loaded\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n     case 'SIMPLE_ACTION':\r\n      return {\r\n          ...state,\r\n       demo: true\r\n      };\r\n\r\n    case ADD_LOADER:{\r\n        return {\r\n            ...state,\r\n            loading: true\r\n        };\r\n    }\r\n    //Loading  image at center\r\n    case SEARCH_SUCCESS: {\r\n        console.log('result', action.payload);\r\n        let imageData = null;\r\n        if(action.payload && action.payload.length) {\r\n            imageData = {...action.payload[0], position: 'center' }\r\n        }\r\n\r\n        return {\r\n            ...state,\r\n            imageData,\r\n            loading: false\r\n        };\r\n    }\r\n    //Change position of text top,center,or bottom\r\n    case CHANGE_POSITION: {\r\n        let imageData = null;\r\n        if(state.imageData) {\r\n            imageData = {...state.imageData, position: action.position }\r\n        }\r\n\r\n        return {\r\n            ...state,\r\n            imageData,\r\n            loading: false\r\n        };\r\n    }\r\n    case CHANGE_CAPTION: {\r\n        console.log('caption', action.text);\r\n        let imageData = null;\r\n        if(state.imageData) {\r\n            imageData = {...state.imageData, text: action.text }\r\n        }\r\n\r\n        return {\r\n            ...state,\r\n            imageData,\r\n            loading: false\r\n        };\r\n    }\r\n    // saved memes in right section after click on save meme button\r\n    case SAVE_DATA: {\r\n        console.log('caption', action.text);\r\n        let data = state.data;\r\n        if(state.imageData) {\r\n            data = [state.imageData, ...data]\r\n        }\r\n        console.log(\"getdata\",data);\r\n        localStorage.setItem('data', JSON.stringify(data));\r\n        return {\r\n            ...state,\r\n            data,\r\n            loading: false\r\n        };\r\n    }\r\n    //cleared the saved memes\r\n    case CLEAR_DATA:{\r\n        console.log('clearDATA', action.text);\r\n        localStorage.clear();\r\n        window.location.reload();\r\n    }\r\n\r\n     default:\r\n      return state\r\n    }\r\n}","/*\r\n src/reducers/rootReducer.js\r\n*/\r\nimport { combineReducers } from 'redux';\r\nimport MemeCreatorReducer from './containers/MemeCreator/reducer';\r\nexport default combineReducers({\r\n MemeCreatorReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={configureStore()}>\r\n     <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","/*\r\n * src/store.js\r\n * With initialState\r\n*/\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\nexport default function configureStore(initialState={}) {\r\n return createStore(\r\n   rootReducer,\r\n   initialState,\r\n   applyMiddleware(thunk)\r\n );\r\n}"],"sourceRoot":""}